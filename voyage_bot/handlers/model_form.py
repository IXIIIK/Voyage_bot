from aiogram import Router, F, types
from bot import bot, dp
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile, URLInputFile, BufferedInputFile

from keyboards.simple_row import make_row_keyboard

router = Router()


# –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–ª–µ–µ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç—Å—é–¥–∞
# —Ç–∞–∫–∞—è –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
start_button = ["–ù–∞—á–∞—Ç—å"]
license = ['–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', " –ù–µ—Ç, —Ö–æ—á—É —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏)"]
pircing_choose = ["–ü—Ä–æ–∫–æ–ª —É—à–∫–∞", "–ü—Ä–æ–∫–æ–ª –ª–∏—Ü–∞", '–ú–∏–∫—Ä–æ–¥–µ—Ä–º–∞–ª', '–ü—Ä–æ–∫–æ–ª —Å–æ—Å–∫–æ–≤']
pircing_experience = [" –£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –ø–∏—Ä—Å–∏–Ω–≥", "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑"]
ear_pircing = ["1. –ú–æ—á–∫–∞", "2. –•–µ–ª–∏–∫—Å", "3. –¢—Ä–∞–≥—É—Å", "4. –î–µ–π—Å", "5. –†—É—É–∫", "6. –ö–æ–Ω—á"]
face_pircing = ["–ë—Ä–æ–≤—å", "–ö—Ä—ã–ª–æ –Ω–æ—Å–∞", "–°–µ–ø—Ç—É–º", "–ü—Ä–æ–∫–æ–ª –≥—É–±—ã", "–ú–µ–¥—É–∑–∞", "–°–º–∞–π–ª", "–Ø–∑—ã–∫"]
confirm_data = ['–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ', '–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—É)']


class ModelPircing(StatesGroup):
    info_about_model = State()
    model_pircing = State()
    pircing_choosing = State()
    start_state = State()
    pircing_exp = State()
    all_data = State()
    confirm = State()


@router.message(Command("start"))
#@dp.message(content_types=['new_chat_members'])
async def cmd_food(message: Message, state: FSMContext):

    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å—Ç—É–¥–∏—è VOYAGE. –í –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–∏—Ä—Å–∏–Ω–≥—É –∏ –Ω–∞—à–∏–º —É—á–µ–Ω–∏–∫–∞–º –Ω—É–∂–Ω—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø—Ä–æ–∫–æ–ª–æ–≤ –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø—ã –ø—Ä–æ–∫–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏. –í—Å–µ –ø—Ä–æ–∫–æ–ª—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–æ–ø –º–∞—Å—Ç–µ—Ä–∞ –Ø–∫–æ–≤–∞, —Ç–∞–∫ —á—Ç–æ –≤—ã –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö üß°",
        reply_markup=make_row_keyboard(start_button)
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(ModelPircing.start_state)

# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞ #


@router.message(ModelPircing.start_state, F.text.in_(start_button))
async def food_chosen(message: Message, state: FSMContext):
    await state.update_data(chosen_food=message.text.lower())
    await message.answer(
        text="–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ —É—á–∞—Å—Ç–∏—è –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö?",
        reply_markup=make_row_keyboard(license)
    )
    await state.set_state(ModelPircing.info_about_model)


@router.message(ModelPircing.info_about_model, F.text == license[0])
async def model_contact(message: Message, state: FSMContext):
    await state.update_data(model_info=message.text.lower())
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–ò–û, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥), –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.‚Äù\n‚Ä¢ –ü—Ä–∏–º–µ—Ä: ‚Äú–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 01.01.2000, +7 900 123 45 67.‚Äù', reply_markup=ReplyKeyboardRemove())
    await state.set_state(ModelPircing.model_pircing)


@router.message(ModelPircing.model_pircing)
async def pircing_model(message: Message, state: FSMContext):
    await state.update_data(model_pircing=message.text.lower())
    await message.answer(text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–∫–æ–ª/—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏.",
                         reply_markup=make_row_keyboard(pircing_choose))
    await state.set_state(ModelPircing.pircing_choosing)
    

@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[0])
async def ear_choose(message: Message, state: FSMContext):
    file_ids = []
    ear_photo = FSInputFile("img/ear_pircing.jpg")
    await state.update_data(ear_pircing=message.text.lower())
    result = await message.answer_photo(
        ear_photo,
        caption="–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–∫–æ–ª–∞",
        reply_markup=make_row_keyboard(ear_pircing)
    )
    file_ids.append(result.photo[-1].file_id)
    await state.set_state(ModelPircing.pircing_exp)


@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[1])
async def face_choose(message: Message, state: FSMContext):
    await state.update_data(face_pircing=message.text.lower())
    await message.answer(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø—Ä–æ–∫–æ–ª–æ–≤ –ª–∏—Ü–∞', reply_markup=make_row_keyboard(face_pircing))
    await state.set_state(ModelPircing.pircing_exp)



@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[2])
async def exp_pirc(message: Message, state: FSMContext):
    await state.update_data(exp_pirc=message.text.lower())
    await state.set_state(ModelPircing.pircing_exp)


@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[3])
async def exp_pirc(message: Message, state: FSMContext):
    await state.update_data(exp_pirc=message.text.lower())
    await state.set_state(ModelPircing.pircing_exp)


@router.message(ModelPircing.pircing_exp)
async def exp_pirc(message: Message, state: FSMContext):
    await state.update_data(exp_pirc=message.text.lower())
    await message.answer(text='–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ –ø–∏—Ä—Å–∏–Ω–≥–µ?',
                         reply_markup=make_row_keyboard(pircing_experience))
    await state.set_state(ModelPircing.all_data)


@router.message(ModelPircing.all_data)
async def correct_data(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name = str(user_data["model_pircing"]).title()
    model_pircing = str(user_data['exp_pirc'])[2:]

    await message.answer(text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫–æ–ª—ã. –í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?\n'
                            f"{model_pircing}\n"
                            f"{name}", reply_markup=make_row_keyboard(confirm_data))
    await state.set_state(ModelPircing.confirm)



@router.message(ModelPircing.confirm, F.text == confirm_data[0])
async def exp_pirc(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name = str(user_data["model_pircing"]).title()
    model_pircing = str(user_data['exp_pirc'])[2:]

    await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç—É–¥–∏–∏ VOYAGE!',
                         reply_markup=ReplyKeyboardRemove())
    await bot.send_message('-4516436729',
                           text=f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n–ú–æ–¥–µ–ª—å: {name}\n–ü–∏—Ä—Å–∏–Ω–≥: {model_pircing}')
    await state.set_state(ModelPircing.all_data)
    await state.clear()


@router.message(ModelPircing.confirm, F.text == confirm_data[1])
async def exp_pirc(message: Message, state: FSMContext):
    await state.set_state(ModelPircing.start_state)
    await state.clear()







# –í —Ü–µ–ª–æ–º, –Ω–∏–∫—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–µ–π—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫–∞–º–∏
# –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ 
# –≤–∞—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–µ–π—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–Ω–æ –∑–∞—á–µ–º?)
@router.message(StateFilter("OrderFood:choosing_food_name"))
async def food_chosen_incorrectly(message: Message):
    await message.answer(
        text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞.\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardRemove()
    )

# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ #


# @router.message(OrderFood.choosing_food_size, F.text.in_(available_food_sizes))
# async def food_size_chosen(message: Message, state: FSMContext):
#     user_data = await state.get_data()
#     await message.answer(
#         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text.lower()} –ø–æ—Ä—Ü–∏—é {user_data['chosen_food']}.\n"
#              f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏: /drinks",
#         reply_markup=ReplyKeyboardRemove()
#     )
#     # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await state.clear()


# @router.message(OrderFood.choosing_food_size)
# async def food_size_chosen_incorrectly(message: Message):
#     await message.answer(
#         text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏.\n\n"
#              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
#         reply_markup=make_row_keyboard(available_food_sizes)
#     )