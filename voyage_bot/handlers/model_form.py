from aiogram import Router, F
from bot import bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile, URLInputFile, BufferedInputFile

from keyboards.simple_row import make_row_keyboard

router = Router()


# –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–ª–µ–µ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç—Å—é–¥–∞
# —Ç–∞–∫–∞—è –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
start_button = ["–ù–∞—á–∞—Ç—å"]
license = ['–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', " –ù–µ—Ç, —Ö–æ—á—É —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏"]
pircing_choose = ["–ü—Ä–æ–∫–æ–ª —É—à–∫–∞", "–ü—Ä–æ–∫–æ–ª –ª–∏—Ü–∞", '–ú–∏–∫—Ä–æ–¥–µ—Ä–º–∞–ª', '–ü—Ä–æ–∫–æ–ª —Å–æ—Å–∫–æ–≤']
pircing_experience = [" –£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –ø–∏—Ä—Å–∏–Ω–≥", "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑"]
ear_pircing = ["1. –ú–æ—á–∫–∞", "2. –•–µ–ª–∏–∫—Å", "3. –¢—Ä–∞–≥—É—Å", "4. –î–µ–π—Å", "5. –†—É—É–∫", "6. –ö–æ–Ω—á"]
face_pircing = ["–ë—Ä–æ–≤—å", "–ö—Ä—ã–ª–æ –Ω–æ—Å–∞", "–°–µ–ø—Ç—É–º", "–ü—Ä–æ–∫–æ–ª –≥—É–±—ã", "–ú–µ–¥—É–∑–∞", "–°–º–∞–π–ª", "–Ø–∑—ã–∫"]
confirm_data = ['–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ', '–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—É)']


class ModelPircing(StatesGroup):
    info_about_model = State()
    model_pircing = State()
    pircing_choosing = State()
    start_state = State()
    pircing_exp = State()
    all_data = State()
    confirm = State()


@router.message(Command("start"))
#@dp.message(content_types=['new_chat_members'])
async def cmd_food(message: Message, state: FSMContext):

    await message.answer(
        text="<b>–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ —Å—Ç—É–¥–∏—è VOYAGE.</b>\n\n–í –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–∏—Ä—Å–∏–Ω–≥—É"
            f"–∏ –Ω–∞—à–∏–º —É—á–µ–Ω–∏–∫–∞–º –Ω—É–∂–Ω—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø—Ä–æ–∫–æ–ª–æ–≤ –í —ç—Ç–æ–º –±–æ—Ç–µ"
            f"–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø—ã –ø—Ä–æ–∫–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å"
            f"–≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏.\n\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, <u>–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ</u>"
            f"<u>–≤–∞–º–∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏</u>.\n\n<b><u>–í—Å–µ –ø—Ä–æ–∫–æ–ª—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–æ–ø</u></b>"
            f"<b><u>–º–∞—Å—Ç–µ—Ä–∞ –Ø–∫–æ–≤–∞, —Ç–∞–∫ —á—Ç–æ –≤—ã –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö</u></b> üß°",   
        reply_markup=make_row_keyboard(start_button)
    )
    await state.set_state(ModelPircing.start_state)


@router.message(ModelPircing.start_state, F.text.in_(start_button))
async def food_chosen(message: Message, state: FSMContext):
    await state.update_data(chosen_food=message.text.lower())
    await message.answer(
        text="–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ —É—á–∞—Å—Ç–∏—è –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö?",
        reply_markup=make_row_keyboard(license)
    )
    await state.set_state(ModelPircing.info_about_model)


@router.message(ModelPircing.info_about_model, F.text == license[0])
async def model_contact(message: Message, state: FSMContext):
    await state.update_data(model_info=message.text.lower())
    await message.answer(text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                          f"<b>–§–ò–û\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥)\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n<i>–ü—Ä–∏–º–µ—Ä:</i>" 
                          f"<i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n01.01.2000\n+7 900 123 45 67</i>", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ModelPircing.model_pircing)


@router.message(ModelPircing.model_pircing)
async def pircing_model(message: Message, state: FSMContext):
    await state.update_data(model_pircing=message.text.lower())
    await message.answer(text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø—Ä–æ–∫–æ–ª/—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏.",
                         reply_markup=make_row_keyboard(pircing_choose))
    await state.set_state(ModelPircing.pircing_choosing)
    

@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[0])
async def ear_choose(message: Message, state: FSMContext):
    file_ids = []
    ear_photo = FSInputFile("img/ear_pircing.jpg")
    await state.update_data(ear_pircing=message.text.lower())
    result = await message.answer_photo(
        ear_photo,
        caption="–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—Ä–æ–∫–æ–ª–∞",
        reply_markup=make_row_keyboard(ear_pircing)
    )
    file_ids.append(result.photo[-1].file_id)
    await state.set_state(ModelPircing.pircing_exp)


@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[1])
async def face_choose(message: Message, state: FSMContext):
    await state.update_data(face_pircing=message.text.lower())
    await message.answer(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø—Ä–æ–∫–æ–ª–æ–≤ –ª–∏—Ü–∞', reply_markup=make_row_keyboard(face_pircing))
    await state.set_state(ModelPircing.pircing_exp)



@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[2])
async def exp_pirc(message: Message, state: FSMContext):
    await state.update_data(exp_pirc=message.text.lower())
    await state.set_state(ModelPircing.pircing_exp)


@router.message(ModelPircing.pircing_choosing, F.text == pircing_choose[3])
async def exp_pirc(message: Message, state: FSMContext):
    await state.update_data(exp_pirc=message.text.lower())
    await state.set_state(ModelPircing.pircing_exp)


@router.message(ModelPircing.pircing_exp)
async def exp_pirc(message: Message, state: FSMContext):
    await state.update_data(exp_pirc=message.text.lower())
    await message.answer(text='–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ –ø–∏—Ä—Å–∏–Ω–≥–µ?',
                         reply_markup=make_row_keyboard(pircing_experience))
    await state.set_state(ModelPircing.all_data)


@router.message(ModelPircing.all_data)
async def correct_data(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name = str(user_data["model_pircing"]).title()
    if any(map(str.isdigit, user_data['exp_pirc'])) == True:
        model_pircing = str(user_data['exp_pirc'])[3:]
    else:
         model_pircing = user_data['exp_pirc']

    await message.answer(text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫–æ–ª—ã. –í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?\n"
                            f"–ü—Ä–æ–∫–æ–ª: {model_pircing}\n"
                            f"{name}", 
                            reply_markup=make_row_keyboard(confirm_data))
    await state.set_state(ModelPircing.confirm)



@router.message(ModelPircing.confirm, F.text == confirm_data[0])
async def exp_pirc(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name = str(user_data["model_pircing"]).title()

    if any(map(str.isdigit, user_data['exp_pirc'])) == True:
        model_pircing = str(user_data['exp_pirc'])[3:]
    else:
         model_pircing = user_data['exp_pirc']

    model_pircing = str(user_data['exp_pirc'])[3:]
    await message.answer(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! üß°\n\n"
                            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏\n\n"
                            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å—Ç—É–¥–∏–∏ VOYAGE ‚ú®",
                         reply_markup=ReplyKeyboardRemove())
    await bot.send_message('-4516436729',
                           text=f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n–ú–æ–¥–µ–ª—å: {name}\n–ü–∏—Ä—Å–∏–Ω–≥: {model_pircing}')
    await state.set_state(ModelPircing.all_data)
    await state.clear()


@router.message(ModelPircing.confirm, F.text == confirm_data[1])
async def exp_pirc(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )